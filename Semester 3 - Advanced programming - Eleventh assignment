//Problem link: https://quera.ir/course/assignments/7244/problems/24717

#include <iostream>
#include <string>
#include <iomanip>
#include <vector>
#include <math.h>
using namespace std;
class Map
{
public:
	void sort()
	{
		int i, j;
		for (i = 0; i < credits.size() - 1; i++)
			for (j = i + 1; j < credits.size(); j++)
				if (credits[i] < credits[j])
				{
					swap(credits[j], credits[i]);
					swap(names[i], names[j]);
				}
	}
	string findMax()
	{
		long max = credits[0];
		int index = 0;
		for (int i = 0; i < credits.size(); i++)
		{
			if (credits[i] > max)
			{
				max = credits[i];
				index = i;
			}
		}
		return names[index];
	}
	int maxCreditLength()
	{
		int lenC = 0;
		for (int i = 0; i < credits.size(); i++)
		{
			if (log10(credits[i])+1 > lenC)
			{
				lenC = log10(credits[i]) + 1;
			}
		}
		return lenC;
	}
	int maxNameLength()
	{
		int lenS = 0;
		for (int i = 0; i < names.size(); i++)
		{
			if (names[i].length() > lenS)
			{
				lenS = names[i].length();
			}
		}
		return lenS;
	}
	long& operator [](string t)
	{
		for (int i = 0; i < names.size(); i++)
		{
			if (names[i] == t)
			{
				return credits[i];
			}
		}
		names.push_back(t);
		credits.push_back(0);
		return credits[credits.size() - 1];
	}
	friend ostream& operator <<(ostream& output, Map& m);
private:
	vector<string> names;
	vector<long> credits;
};

ostream& operator <<(ostream& output, Map& m)
{
	m.sort();
	int lenC = m.maxCreditLength();
	int lenS = m.maxNameLength();
	if (lenC < 5)
		lenC = 5;
	if (lenS < 4)
		lenS = 4;
	string namesRoof="", creditsRoof="";
	for (int i = 0; i < lenS; i++)
		namesRoof += "-";
	for (int i = 0; i < lenC; i++)
		creditsRoof += "-";
	output << "+" << namesRoof << "+" << creditsRoof << "+" << endl;
	output << "|" << setw(lenS) << left << "Name" << internal << "|" << setw(lenC) << left << "Money" << "|" << endl;
	for (int i = 0; i <m.names.size(); i++)
	{
		output << "+" << namesRoof << "+" << creditsRoof << "+" << endl;
		output << "|" << setw(lenS) << left << m.names[i] << internal << "|" << setw(lenC) << right << m.credits[i] << "|" << endl;
	}
	output << "+" << namesRoof << "+" << creditsRoof << "+" << endl;
	return output;
}
int main()
{
	Map bank;
	string cmd, p1;
	long crd;
	while (true)
	{
		cin >> cmd;
		if (cmd == "bank")
		{
			cin >> p1 >> crd;
			bank[p1]+= crd;
		}
		else if (cmd == "print")
		{
			cout << bank;
		}
		else if (cmd == "exit")
		{
			cout << bank.findMax() << endl;
			break;
		}
		else
		{
			cin >> p1 >> crd;
			if (p1 == "bank")
			{
				bank[cmd] -= crd;
			}
			else
			{
				bank[cmd] -= crd;
				bank[p1] += crd;
			}
		}

	}
}
